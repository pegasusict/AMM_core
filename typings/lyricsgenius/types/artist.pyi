"""
This type stub file was generated by pyright.
"""

from .base import BaseEntity

"""Artist object"""
class Artist(BaseEntity):
    """An artist with songs from the Genius.com database."""
    def __init__(self, client, json_dict) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def add_song(self, new_song, verbose=..., include_features=...): # -> None:
        """Adds a song to the Artist.

        This method adds a new song to the artist object. It checks
        if the song is already in artist's songs and whether the
        song's artist is the same as the `Artist` object.

        Args:
            new_song (:class:`Song <lyricsgenius.types.Song>`): Song to be added.
            verbose (:obj:`bool`, optional): prints operation result.
            include_features (:obj:`bool`, optional): If True, includes tracks
                featuring the artist.

        Returns:
            :obj:`int`: 0 for success and 1 for failure.

        Examples:
            .. code:: python

                genius = Genius(token)
                artist = genius.search_artist('Andy Shauf', max_songs=3)

                # Way 1
                song = genius.search_song('To You', artist.name)
                artist.add_song(song)

                # Way 2
                artist.add_song('To You')

        """
        ...
    
    def song(self, song_name):
        """Gets the artist's song.

        If the song is in the artist's songs, returns the song. Otherwise searches
        Genius for the song and then returns the song.

        Args:
            song_name (:obj:`str`): name of the song.
                the result is returned as a string.

        Returns:
            :obj:`Song <types.Song>` \\|â€Œ :obj:`None`: If it can't find the song,
            returns *None*.

        """
        ...
    
    def to_dict(self):
        ...
    
    def to_json(self, filename=..., sanitize=..., ensure_ascii=...): # -> str | None:
        ...
    
    def to_text(self, filename=..., sanitize=...): # -> None:
        ...
    
    def save_lyrics(self, filename=..., extension=..., overwrite=..., ensure_ascii=..., sanitize=..., verbose=...): # -> None:
        ...
    
    def __str__(self) -> str:
        """Return a string representation of the Artist object."""
        ...
    


