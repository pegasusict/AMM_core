"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod

class BaseEntity(ABC):
    """Base class for types."""
    def __init__(self, id) -> None:
        ...
    
    @abstractmethod
    def save_lyrics(self, filename, extension=..., overwrite=..., ensure_ascii=..., sanitize=..., verbose=...): # -> None:
        """Save Song(s) lyrics and metadata to a JSON or TXT file.

        If the extension is 'json' (the default), the lyrics will be saved
        alongside the song's information. Take a look at the example below.

        Args:
            filename (:obj:`str`, optional): Output filename, a string.
                If not specified, the result is returned as a string.
            extension (:obj:`str`, optional): Format of the file (`json` or `txt`).
            overwrite (:obj:`bool`, optional): Overwrites preexisting file if `True`.
                Otherwise prompts user for input.
            ensure_ascii (:obj:`bool`, optional): If ensure_ascii is true
                (the default), the output is guaranteed to have all incoming
                non-ASCII characters escaped.
            sanitize (:obj:`bool`, optional): Sanitizes the filename if `True`.
            verbose (:obj:`bool`, optional): prints operation result.

        Warning:
            If you set :obj:`sanitize` to `False`, the file name may contain
            invalid characters, and thefore cause the saving to fail.

        """
        ...
    
    @abstractmethod
    def to_dict(self):
        """Converts the object to a dictionary."""
        ...
    
    @abstractmethod
    def to_json(self, data, filename=..., sanitize=..., ensure_ascii=...): # -> str | None:
        """Converts the object to a json string.

        Args:
            filename (:obj:`str`, optional): Output filename, a string.
                If not specified, the result is returned as a string.
            sanitize (:obj:`bool`, optional): Sanitizes the filename if `True`.
            ensure_ascii (:obj:`bool`, optional): If ensure_ascii is true
              (the default), the output is guaranteed to have all incoming
              non-ASCII characters escaped.

        Returns:
            :obj:`str` \\|â€Œ :obj:`None`: If :obj:`filename` is `None`,
            returns the lyrics as a plain string, otherwise `None`.

        Warning:
            If you set :obj:`sanitize` to `False`, the file name may contain
            invalid characters, and therefore cause the saving to fail.

        """
        ...
    
    @abstractmethod
    def to_text(self, data, filename=..., sanitize=...): # -> None:
        """Converts song(s) lyrics to a single string.

        Args:
            filename (:obj:`str`, optional): Output filename, a string.
                If not specified, the result is returned as a string.
            sanitize (:obj:`bool`, optional): Sanitizes the filename if `True`.

        Returns:
            :obj:`str` \\|â€Œ :obj:`None`: If :obj:`filename` is `None`,
            returns the lyrics as a plain string. Otherwise `None`.

        Warning:
            If you set :obj:`sanitize` to `False`, the file name may contain
            invalid characters, and therefore cause the saving to fail.

        """
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Stats:
    """Stats of an item.

    Note:
        The values passed to this class are inconsistent,
        and therefore need to be set dynamically.
        Use the built-in ``dir()`` function to
        see the available attributes.
        You could also access the stats by the dictionary
        annotation. For example:

        .. code:: python

            values = song.to_dict()
            print(values['stats'])

    """
    def __init__(self, json_dict) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


