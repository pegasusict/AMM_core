"""
This type stub file was generated by pyright.
"""

class ArtistMethods:
    """Artist methods of the public API."""
    def artist(self, artist_id, text_format=...):
        """Gets data for a specific artist.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...
    
    def artist_activity(self, artist_id, per_page=..., page=..., text_format=...):
        """Gets activities on artist's songs.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...
    
    def artist_albums(self, artist_id, per_page=..., page=...):
        """Gets artist's albums.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).

        Returns:
            :obj:`dict`

        """
        ...
    
    def artist_contribution_opportunities(self, artist_id, per_page=..., next_curosr=..., text_format=...):
        """Gets contribution opportunities related to the artist.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`int`, optional): Paginated offset
                (address of the next cursor).
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        Warning:
            This method requires a logged in user and will raise
            ``NotImplementedError``.

        """
        ...
    
    def artist_followers(self, artist_id, per_page=..., page=...):
        """Gets artist's followers.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).

        Returns:
            :obj:`dict`

        """
        ...
    
    def artist_leaderboard(self, artist_id, per_page=..., page=...):
        """Gets artist's top scholars.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).

        Returns:
            :obj:`dict`

        """
        ...
    
    def artist_songs(self, artist_id, per_page=..., page=..., sort=...):
        """Gets artist's songs.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')

        Returns:
            :obj:`dict`

        """
        ...
    
    def search_artist_songs(self, artist_id, search_term, per_page=..., page=..., sort=...):
        """Searches artist's songs.

        Args:
            artist_id (:obj:`int`): Genius artist ID
            search_term (:obj:`str`): A term to search on Genius.
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')

        Returns:
            :obj:`dict`

        """
        ...
    


