"""
This type stub file was generated by pyright.
"""

class UserMethods:
    """User methods of the public API."""
    def user(self, user_id, text_format=...):
        """Gets data for a specific user.

        Args:
            user_id (:obj:`int`): Genius user ID
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_accomplishments(self, user_id, per_page=..., next_cursor=...):
        """Gets user's accomplishments.

        This methods gets the section titled "TOP ACCOMPLISHMENTS" in
        the user's profile.

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).

        Returns:
            :obj:`dict`

        """
        ...

    def user_following(self, user_id, per_page=..., page=...):
        """Gets the accounts user follows.

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).

        Returns:
            :obj:`dict`

        """
        ...

    def user_followers(self, user_id, per_page=..., page=...):
        """Gets user's followers.

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).

        Returns:
            :obj:`dict`

        """
        ...

    def user_contributions(
        self,
        user_id,
        per_page=...,
        next_cursor=...,
        sort=...,
        text_format=...,
        type_=...,
    ):
        """Gets user's contributions.

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').
            type_ (:obj:`int`, optional): Type of the contribution
                ('annotations', 'articles', 'pyongs', 'questions_and_answers',
                'comments', 'transcriptions' or 'unreviewed annotations').

        Returns:
            :obj:`dict`


        Note:
            Not all types support a sorting preference. Setting the :obj:`sort` for
            these types won't result in erros, but won't make a difference in the
            results either. To find out which types support which features, look at
            the alias methods.

        Note:
            Setting no value for the :obj:`type_` will return the user's contributions
            (regardless of its type) in chronological order; just like visting a
            user's profile page and scrolling down, looking at their contributions over
            time.

        """
        ...

    def user_annotations(
        self, user_id, per_page=..., next_cursor=..., sort=..., text_format=...
    ):
        """Gets user's annotations.

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_articles(
        self, user_id, per_page=..., next_cursor=..., sort=..., text_format=...
    ):
        """Gets user's articles.

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_pyongs(self, user_id, per_page=..., next_cursor=..., text_format=...):
        """Gets user's Pyongs.

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_questions_and_answers(
        self, user_id, per_page=..., next_cursor=..., text_format=...
    ):
        """Gets user's Q&As.

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_suggestions(self, user_id, per_page=..., next_cursor=..., text_format=...):
        """Gets user's suggestions (comments).

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_transcriptions(
        self, user_id, per_page=..., next_cursor=..., sort=..., text_format=...
    ):
        """Gets user's transcriptions.

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def user_unreviewed(
        self, user_id, per_page=..., next_cursor=..., sort=..., text_format=...
    ):
        """Gets user's unreviewed annotations.

        Alias for :meth:`user_contributions() <PublicAPI.user_contributions>`

        This method gets user annotations that have the
        "This annotations is unreviewed" sign above them.

        Args:
            user_id (:obj:`int`): Genius user ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            next_cursor (:obj:`str`, optional): Paginated offset
                (address of the next cursor).
            sort (:obj:`str`, optional): Sorting preference.
                ('title' or 'popularity')
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...
