"""
This type stub file was generated by pyright.
"""

class AnnotationMethods:
    """Annotation methods of the public API."""
    def annotation(self, annotation_id, text_format=...):
        """Gets data for a specific annotation.

        Args:
            annotation_id (:obj:`int`): Genius annotation ID
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def annotation_edits(self, annotation_id, text_format=...):
        """Gets the edits on annotation (its versions).

        Args:
            annotation_id (:obj:`int`): Genius annotation ID
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...

    def annotation_comments(
        self, annotation_id, per_page=..., page=..., text_format=...
    ):
        """Gets the comments on an annotation.

        Args:
            annotation_id (:obj:`int`): Genius annotation ID
            per_page (:obj:`int`, optional): Number of results to
                return per request. It can't be more than 50.
            page (:obj:`int`, optional): Paginated offset (number of the page).
            text_format (:obj:`str`, optional): Text format of the results
                ('dom', 'html', 'markdown' or 'plain').

        Returns:
            :obj:`dict`

        """
        ...
