"""
This type stub file was generated by pyright.
"""

import os
import json
import requests
import contextlib
import errno
import audioread
import chromaprint
import subprocess
import threading
import time
import gzip
from typing import List
from io import BytesIO

have_audioread = ...
have_chromaprint = ...
API_BASE_URL = ...
DEFAULT_META = ...
REQUEST_INTERVAL = ...
MAX_AUDIO_LENGTH = ...
FPCALC_COMMAND = ...
FPCALC_ENVVAR = ...
MAX_BIT_ERROR = ...
MAX_ALIGN_OFFSET = ...
class AcoustidError(Exception):
    """Base for exceptions in this module."""
    ...


class FingerprintGenerationError(AcoustidError):
    """The audio could not be fingerprinted."""
    ...


class NoBackendError(FingerprintGenerationError):
    """The audio could not be fingerprinted because neither the
    Chromaprint library nor the fpcalc command-line tool is installed.
    """
    ...


class FingerprintSubmissionError(AcoustidError):
    """Missing required data for a fingerprint submission."""
    ...


class WebServiceError(AcoustidError):
    """The Web service request failed. The field ``message`` contains a
    description of the error. If this is an error that was specifically
    sent by the acoustid server, then the ``code`` field contains the
    acoustid error code.
    """
    def __init__(self, message, response=...) -> None:
        """Create an error for the given HTTP response body, if
        provided, with the ``message`` as a fallback.
        """
        ...
    


def set_base_url(url): # -> None:
    """Set the URL of the API server to query."""
    ...

class CompressedHTTPAdapter(requests.adapters.HTTPAdapter):
    """An `HTTPAdapter` that compresses request bodies with gzip. The
    Content-Encoding header is set accordingly.
    """
    def add_headers(self, request, **kwargs): # -> None:
        ...
    


class _rate_limit:
    """A decorator that limits the rate at which the function may be
    called.  The rate is controlled by the REQUEST_INTERVAL module-level
    constant; set the value to zero to disable rate limiting. The
    limiting is thread-safe; only one thread may be in the function at a
    time (acts like a monitor in this sense).
    """
    def __init__(self, fun) -> None:
        ...
    
    def __call__(self, *args, **kwargs):
        ...
    


def fingerprint(samplerate, channels, pcmiter, maxlength=...):
    """Fingerprint audio data given its sample rate and number of
    channels.  pcmiter should be an iterable containing blocks of PCM
    data as byte strings. Raises a FingerprintGenerationError if
    anything goes wrong.
    """
    ...

def lookup(apikey, fingerprint, duration, meta=..., timeout=...):
    """Look up a fingerprint with the Acoustid Web service. Returns the
    Python object reflecting the response JSON data. To get more data
    back, ``meta`` can be a list of keywords from this list: recordings,
    recordingids, releases, releaseids, releasegroups, releasegroupids,
    tracks, compress, usermeta, sources.
    """
    ...

def parse_lookup_result(data): # -> Generator[tuple[Any, Any, Any, LiteralString | None], Any, None]:
    """Given a parsed JSON response, generate tuples containing the match
    score, the MusicBrainz recording ID, the title of the recording, and
    the artist name of the recording. Multiple artist names are joined
    by join phrases as displayed on web page. If an artist is not available,
    the last item is None. If the response is incomplete, raises a
    WebServiceError.
    """
    ...

def fingerprint_file(path, maxlength=..., force_fpcalc=...): # -> tuple[Any, Any] | tuple[float, bytes]:
    """Fingerprint a file either using the Chromaprint dynamic library
    or the fpcalc command-line tool, whichever is available (unless
    ``force_fpcalc`` is specified). Returns the duration and the
    fingerprint.
    """
    ...

def compare_fingerprints(a, b) -> float:
    """Compare two fingerprints produced by `fingerprint_file`.

    :param a: A pair produced by `fingerprint_file`.
    :param b: A second such pair.
    :return:  similarity score [0,1]
    """
    ...

def match(apikey, path, meta=..., parse=..., force_fpcalc=..., timeout=...): # -> Generator[tuple[Any, Any, Any, LiteralString | None], Any, None]:
    """Look up the metadata for an audio file. If ``parse`` is true,
    then ``parse_lookup_result`` is used to return an iterator over
    small tuple of relevant information; otherwise, the full parsed JSON
    response is returned. Fingerprinting uses either the Chromaprint
    library or the fpcalc command-line tool; if ``force_fpcalc`` is
    true, only the latter will be used. To get more data back, ``meta``
    can be a list of keywords from this list: recordings, recordingids,
    releases, releaseids, releasegroups, releasegroupids, tracks,
    compress, usermeta, sources.
    """
    ...

def submit(apikey, userkey, data, timeout=...):
    """Submit a fingerprint to the acoustid server. The ``apikey`` and
    ``userkey`` parameters are API keys for the application and the
    submitting user, respectively.

    ``data`` may be either a single dictionary or a list of
    dictionaries. In either case, each dictionary must contain a
    ``fingerprint`` key and a ``duration`` key and may include the
    following: ``puid``, ``mbid``, ``track``, ``artist``, ``album``,
    ``albumartist``, ``year``, ``trackno``, ``discno``, ``fileformat``,
    ``bitrate``

    If the required keys are not present in a dictionary, a
    FingerprintSubmissionError is raised.

    Returns the parsed JSON response.
    """
    ...

def get_submission_status(apikey, submission_id, timeout=...):
    """Get the status of a submission to the acoustid server.
    ``submission_id`` is the id of a fingerprint submission, as returned
    in the response object of a call to the ``submit`` endpoint.
    """
    ...

